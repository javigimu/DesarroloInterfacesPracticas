<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatosEEF</name>
    </assembly>
    <members>
        <member name="T:DatosEEF.CategoryADO">
            <summary>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
        <member name="T:DatosEEF.CustomerADO">
            <summary>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
        <member name="T:DatosEEF.EmployeeADO">
            <summary>
            Clase EmployeeADO.
            Clase que gestiona las operaciones necesarias en la base de datos para los empleados.
            <see cref="T:Modelos.Employee"/>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
        <member name="M:DatosEEF.EmployeeADO.#ctor">
            <summary>
            Constructor por defecto
            </summary>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Listar">
            <summary>
            Obtiene de la base de datos el listado completo de empleados
            </summary>
            <returns>Lista de empleados</returns>
            <example>Muestra como se obtiene una lista de la tabla Employees desde el contexto NorthwindContext
            <code>var data = context.Employees.ToList()</code>
            </example>
            <remarks>
            Obtención de una lista de <see cref="T:Modelos.Employee"/> independiente del tipo de base de datos.
            Obtiene la lista de empleados ordenados por <see cref="P:Modelos.Employee.FirstName"/> 
            y <see cref="P:Modelos.Employee.LastName"/></remarks>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Listar(System.Int32)">
            <summary>
            Obtiene los datos de un empleado
            </summary>
            <param name="ID">Identificador del empleado: EmployeeId</param>
            <returns>Un objeto empleado</returns>
            <example>Muestra como se obtiene un <see cref="T:Modelos.Employee"/> con <see cref="P:Modelos.Employee.EmployeeId"/> 5
            <code>
            var query = from st in context.Employees
                where st.EmployeeId == 5
                select st;
            </code>
            </example>
            <remarks>
            Obtención de un <see cref="T:Modelos.Employee"/> independiente del tipo de base de datos.
            Si no se encuentra el Id de empleado devuelve null, sino obtiene todos los datos del objeto.
            <see cref="T:Modelos.Employee"/> de la base de datos</remarks>
        </member>
        <member name="M:DatosEEF.EmployeeADO.ListarPedidosId(System.Int32)">
            <summary>
            Obtiene todos los Id de pedido de un empleado
            </summary>
            <param name="ID">Identificador del empleado: EmployeeId</param>
            <returns>Lista de Id de pedidos</returns>
            <see cref="T:Modelos.Order"/>
            <example>Muestra de cómo obtener el listado de todos los <see cref="P:Modelos.Order.OrderId"/> del empleado <see cref="T:Modelos.Employee"/> 5
            <code>
            var query = from st in context.Orders
                where st.EmployeeId == 5
                select st.OrderId
            </code>
            </example>
            <remarks>
            Obtención de Lista de <see cref="P:Modelos.Order.OrderId"/> independiente del tipo de base de datos.
            El método debe recibir un <see cref="P:Modelos.Employee.EmployeeId"/> existente o devolverá una lista vacía.
            </remarks>
        </member>
        <member name="M:DatosEEF.EmployeeADO.ListarPedidos(System.Int32)">
            <summary>
            Obtiene una colección con todos los pedidos completos de un empleado
            </summary>
            <param name="ID">Identificador del empleado: EmployeeId</param>
            <returns>Colección de pedidos de un empleado</returns>
            <see cref="T:Modelos.Order"/>
            /// <example>Muestra de cómo obtener el listado de todos los <see cref="T:Modelos.Order"/> del <see cref="P:Modelos.Employee.EmployeeId"/> 5
            <code>
            var query = from st in context.Orders
                where st.EmployeeId == 5
                select st
            </code>
            </example>
            <remarks>
            Obtención de pedidos independiente del tipo de base de datos.
            El método debe recibir un <see cref="P:Modelos.Employee.EmployeeId"/> existente o devolverá null.
            </remarks>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Insertar(Modelos.Employee)">
            <summary>
            Inserta un nuevo empleado en la base de datos
            </summary>
            <param name="dato">Nuevo empleado</param>
            <example>Muestra de inserción de un <see cref="T:Modelos.Employee"/> empleado en la base de datos
            <code>
            context.Entry(empleado).State = EntityState.Added;
            context.SaveChanges();
            </code>
            </example>
            <remarks>
            Inserción de un <see cref="T:Modelos.Employee"/> en la base de datos independiente del tipo de base de datos
            </remarks>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Actualizar(Modelos.Employee)">
            <summary>
            Actualiza un empleado existente en la base de datos
            </summary>
            <param name="modificado">Empleado a modificar</param>
            <example>Muestra de actualización de un <see cref="T:Modelos.Employee"/> empleado
            <code>
            context.Entry(empleado).State = EntityState.Modified;
            context.SaveChanges();
            </code>
            </example>
            <remarks>
            Actualización de un <see cref="T:Modelos.Employee"/> independiente del tipo de la base de datos.
            </remarks>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Borrar(Modelos.Employee)">
            <summary>
            Borra un empleado de la base de datos
            </summary>
            <param name="dato">Empleado a borrar</param>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Dispose">
            <summary>
            Implementación de Dispose para liberar recursos
            </summary>
        </member>
        <member name="M:DatosEEF.EmployeeADO.Dispose(System.Boolean)">
            <summary>
            Implementación protegida del método Dispose
            </summary>
            <param name="disposing">Booleano que indica se ha llamado a Dispose</param>
        </member>
        <member name="T:DatosEEF.NorthwindContext">
            <summary>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
        <member name="T:DatosEEF.OrderADO">
            <summary>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
        <member name="T:DatosEEF.OrderDetailADO">
            <summary>
            <autor>Javier Giménez Muñoz</autor>
            </summary>
        </member>
        <member name="T:DatosEEF.ShipperADO">
            <summary>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
        <member name="T:DatosEEF.SupplierADO">
            <summary>
            <autor>Javier Giménez</autor>
            </summary>
        </member>
    </members>
</doc>
